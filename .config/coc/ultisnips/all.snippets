snippet todo "TODO comment" bw
`!p snip.rv=get_comment_format()[0]` TODO: ${3:comment}: <`!v strftime('%Y-%m-%d')`, `!v g:snips_author`> `!p snip.rv=get_comment_format()[2]`
endsnippet

snippet fixme "FIXME comment" bw
`!p snip.rv=get_comment_format()[0]` FIXME: ${3:comment} <`!v strftime('%Y-%m-%d')`, `!v g:snips_author`> `!p snip.rv=get_comment_format()[2]`
endsnippet

global !p
def insert_table(snip):
	# anon_snippet_table = anon_snippet_title + anon_snippet_delimiter + anon_snippet_body
	anon_snippet_table = "*" * 33

	# expand anonymous snippet
	snip.expand_anon(anon_snippet_table)
endglobal

post_jump "insert_table(snip)"
snippet "it([1-9][1-9])" "Fancy table" br
`!p snip.rv = "*"*33`
`!p snip.rv = match.group(1)`
endsnippet

global !p
def create_table(snip):
    # retrieving single line from current string and treat it like tabstops count
    placeholders_string = snip.buffer[snip.line].strip()[2:].split("x",1)
    rows_amount = int(placeholders_string[0])
    columns_amount = int(placeholders_string[1])

    # erase current line
    snip.buffer[snip.line] = ''

    # create anonymous snippet with expected content and number of tabstops
    anon_snippet_title = ' | '.join(['$' + str(col) for col in range(1,columns_amount+1)]) + "\n"
    anon_snippet_delimiter = ':-|' * (columns_amount-1) + ":-\n"
    anon_snippet_body = ""
    for row in range(1,rows_amount+1):
        anon_snippet_body += ' | '.join(['$' + str(row*columns_amount+col) for col in range(1,columns_amount+1)]) + "\n"
    anon_snippet_table = anon_snippet_title + anon_snippet_delimiter + anon_snippet_body

    # expand anonymous snippet
    snip.expand_anon(anon_snippet_table)
endglobal

pre_expand "create_table(snip)"
snippet "tb(\d+x\d+)" "Customizable table" br
endsnippet


post_jump "create_table(snip)"
snippet "tb([1-9][1-9])" "Fancy table" br
`!p snip.rv = match.group(1)`
`!p snip.rv = snip.expand_anon("$1,$2,$3\n-|-|-")`

endsnippet

snippet bb "test" bwi
is${1:Dunk}Possible(_tick) {
	`!p snip.rv = snip.v.mode`
	`!p snip.rv = snip.v.text`
	${VISUAL}
	${VISUAL}
}
endsnippet

