/// <reference types="node" />
import { Note, NoteConfig, Notes } from './note';
import { Reference, ReferenceMap } from './reference';
import Search from './search';
import { Stats } from 'fs';
interface CrossnoteConfig {
    _: string;
}
type FileSystemApi = {
    readFile: (path: string, encoding?: string) => Promise<string>;
    writeFile: (path: string, content: string, encoding?: string) => Promise<void>;
    mkdir: (path: string) => Promise<void>;
    exists: (path: string) => Promise<boolean>;
    stat: (path: string) => Promise<Stats>;
    readdir: (path: string) => Promise<string[]>;
    unlink: (path: string) => Promise<void>;
};
interface CrossnoteArgs {
    notebookPath: string;
    config: CrossnoteConfig;
    fs?: FileSystemApi;
}
interface RefreshNotesArgs {
    dir: string;
    includeSubdirectories?: boolean;
    refreshRelations?: boolean;
}
export declare const IS_NODE: boolean;
export declare class Notebook {
    private notebookPath;
    private fs;
    notes: Notes;
    hasLoadedNotes: boolean;
    referenceMap: ReferenceMap;
    search: Search;
    private refreshNotesIfNotLoadedMutex;
    private constructor();
    private init;
    static init(args: CrossnoteArgs): Promise<Notebook>;
    initFs(_fs?: FileSystemApi): Promise<void>;
    getBacklinkedNotes(filePath: string): Promise<Notes>;
    getReferences(noteFilePath: string, backlinkedNoteFilePath: string): Promise<Reference[]>;
    processNoteMentionsAndMentionedBy(filePath: string): Promise<void>;
    getNote(filePath: string, refreshNoteRelations?: boolean): Promise<Note | null>;
    refreshNotesIfNotLoaded({ dir, includeSubdirectories, }: RefreshNotesArgs): Promise<Notes>;
    refreshNotes({ dir, includeSubdirectories, refreshRelations, }: RefreshNotesArgs): Promise<Notes>;
    writeNote(filePath: string, markdown: string, noteConfig: NoteConfig): Promise<Note | null>;
    removeNoteRelations(filePath: string): Promise<void>;
    deleteNote(filePath: string): Promise<void>;
    duplicateNote(filePath: string): Promise<Note | null | undefined>;
}
export {};
