/// <reference types="cheerio" />
/// <reference types="node" />
import * as child_process from 'child_process';
import * as temp from 'temp';
import { JsonObject } from 'type-fest';
import * as vscode from 'vscode';
import { BlockInfo } from './lib/block-info/types';
export interface ParserConfig {
    onWillParseMarkdown?: (markdown: string) => Promise<string>;
    onDidParseMarkdown?: (html: string, opts: {
        cheerio: CheerioAPI;
    }) => Promise<string>;
    onWillTransformMarkdown?: (markdown: string) => Promise<string>;
    onDidTransformMarkdown?: (markdown: string) => Promise<string>;
}
export declare function sleep(ms: number): Promise<void>;
export declare function parseYAML(yaml?: string): JsonObject;
export declare function readFile(file: string, options?: any): Promise<string>;
export declare function writeFile(file: string | number, text: any, options?: any): Promise<void>;
export declare function write(fd: number, text: string): Promise<void>;
export declare function tempOpen(options: any): Promise<temp.OpenFile>;
export declare function execFile(file: string, args: string[], options?: object): Promise<string>;
export declare function openFile(filePath: string): child_process.ChildProcess | undefined;
export declare function setExtentensionDirectoryPath(path: string): void;
export declare function getExtensionDirectoryPath(): string;
export declare function getGlobalStyles(configPath: string): Promise<string>;
export declare function getConfigPath(): string;
export declare function getMermaidConfig(configPath: string): Promise<string>;
export declare const defaultMathjaxConfig: {
    tex: {};
    options: {};
    loader: {};
};
export declare const defaultKaTeXConfig: {
    macros: {};
};
export declare function getMathJaxConfig(configPath: string): Promise<object>;
export declare function getKaTeXConfig(configPath: string): Promise<object>;
export declare function getExtensionConfig(configPath: string): Promise<object>;
export declare function getParserConfig(configPath: string): Promise<ParserConfig>;
export declare function useExternalAddFileProtocolFunction(func: (filePath: string, vscodePreviewPanel: vscode.WebviewPanel) => string): void;
export declare function addFileProtocol(filePath: string, vscodePreviewPanel?: vscode.WebviewPanel | null): string;
export declare function removeFileProtocol(filePath: string): string;
export declare const configs: {
    globalStyle: string;
    mathjaxConfig: object;
    katexConfig: object;
    mermaidConfig: string;
    parserConfig: ParserConfig;
    config: object;
};
export { uploadImage } from './image-uploader.js';
export declare function allowUnsafeEval(fn: any): any;
export declare function allowUnsafeEvalAync(fn: () => Promise<any>): Promise<any>;
export declare function allowUnsafeNewFunction(fn: any): any;
export declare function allowUnsafeNewFunctionAsync(fn: () => Promise<any>): Promise<any>;
export declare function allowUnsafeEvalAndUnsafeNewFunctionAsync(fn: () => Promise<any>): Promise<any>;
export declare const loadDependency: (dependencyPath: string) => any;
export declare const extractCommandFromBlockInfo: (info: BlockInfo) => any;
export declare function Function(...args: string[]): any;
export declare namespace Function {
    var prototype: Function;
}
